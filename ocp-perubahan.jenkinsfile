node {
   def appName="java"
    def projectName="javaservice"

   // Mark the code checkout 'stage'....
   stage 'Checkout'
   
  

 sh "oc get imagestreamtag -o jsonpath='{.items[?(@.tag.name!=\"latest\")].metadata.name}' --sort-by={metadata.creationTimestamp} -n ${projectName} | grep ${appName} > version"
            def versions = readFile('version')

            versions = versions.replaceAll("\\s","\n")
            timeout (time:10, unit: 'MINUTES'){
            env.VERSION= input message : "promote ${appName} from DEV to DC and DRC", ok:"Promote",
                                        parameters: [choice(name:'Image Version ordered by build date asc', choices:versions, description: 'Name App version to Promote')]
            }
            version=env.VERSION.replace("${appName}:", "")
            echo "version selected ${version}"

            echo "capturing token"
            tokenLocal = sh(script: 'oc whoami -t', returnStdout: true).trim() 

   sh "git clone https://github.com/GODZ217/jenkins.git "

   sh "git fetch"
 

   stage 'push'

           
            
            sh "oc tag cicd/java:latest javaservice/java:${tag} "
            sh "oc tag cicd/java:latest javaservice/java:latest "

     stage 'deploy'

      sh "sed 's,\\\$REGISTRY/\\\$HARBOR_NAMESPACE/\\\$APP_NAME:\\\$BUILD_NUMBER,image-registry.openshift-image-registry.svc:5000/javaservice/java:latest,g' kubernetes_dev.yaml > kubernetes-ocp.yaml"
            sh "oc apply -f kubernetes-ocp.yaml -n javaservice "
            sh "oc set triggers deployment/java --from-image=javaservice/java:latest -c java -n javaservice || true "


}
